{"version":3,"sources":["components/layout.js","components/cell.js","helpers.js","components/newgamemenu.js","components/rulespopup.js","components/board.js","buttonThemes.js","components/parks.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Layout","useState","drawerOpen","state","setState","toggleDrawer","anchor","open","event","type","key","Drawer","onClose","role","onClick","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","AppBar","color","className","position","Toolbar","variant","IconButton","edge","aria-label","Typography","Cell","handleClick","props","cell","Button","style","maxWidth","maxHeight","minWidth","minHeight","this","value","Component","arrayEquals","A","B","i","length","unitContains","b","NewGameMenu","React","anchorEl","setAnchorEl","setDifficulty","difficulty","menuHandler","handleClose","aria-controls","aria-haspopup","currentTarget","id","keepMounted","Boolean","MenuItem","e","RulesPopUp","setOpen","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","colors","createMuiTheme","palette","red","secondary","green","deepPurple","indigo","cyan","teal","lime","brown","blueGrey","lightGreen","amber","Board","j","val","newVal","row","col","incrementValue","values","produce","draft","parksPuzzle","rows","cols","trees","toString","treeCount","patches","inversePatches","inverseChanges","push","refreshState","applyPatches","flat","showSolution","solution","solutions","handleUndo","undo","pop","isSolved","json","size","peers","square","squares","parks","park","newPark","parsePuzzle","solvePuzzle","initialState","Grid","container","direction","justify","Box","map","index","ThemeProvider","theme","alignItems","startIcon","border","borderColor","borderRadius","prevProps","gameCount","console","log","vals","indexOf","puzzle","puzzles","Math","floor","random","result","rowArr","colArr","a","cross","sq","sq_peers","Set","add","stack","Array","from","keys","treePlacement","posStr","t","isValid","currentPlacement","Parks","mt","wrap","Main","exact","path","component","enablePatches","darkTheme","App","CssBaseline","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a5e185d.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nexport default function Layout() {\n\n    const [state, setState] = useState({\n    drawerOpen: false,\n    });\n\n    const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === \"keydown\" &&(event.key === \"Tab\" || event.key === \"Shift\")) {\n      return;\n    }\n    setState({ ...state, [anchor]: open });\n  };\n    return (\n      <div>\n        <Drawer  anchor='left' open={state['drawerOpen']} onClose={toggleDrawer('drawerOpen', false)}  >\n            {/* Drawer Contents  */}\n            <div\n            role=\"presentation\"\n            onClick={toggleDrawer('drawerOpen', false)}\n            onKeyDown={toggleDrawer('drawerOpen', false)}\n            >\n            <List>\n                <ListItem button key=\"My Profile\">                    \n                    <ListItemIcon>\n                    <PersonIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"My Profile\" />\n                </ListItem>     \n                <ListItem button key=\"Contact Me\">\n                    <ListItemIcon>\n                    <MailIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Contact Me\" />                    \n                </ListItem>             \n            </List>\n            <Divider />\n            {/* <List>\n                {[\"Button1\", \"Button2\", \"Button3\"].map((text, index) => (\n                <ListItem button key={text}>\n                    <ListItemIcon>\n                    {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                    </ListItemIcon>\n                    <ListItemText primary={text} />\n                </ListItem>\n                ))}\n            </List> */}\n            </div>\n        </Drawer>\n\n        <AppBar color=\"#fff\"className=\"appBar\" position=\"static\">\n          <Toolbar variant=\"regular\">\n            <IconButton\n              edge=\"start\"\n              onClick={toggleDrawer('drawerOpen', true)}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" >\n              Parks Puzzle\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    ) \n}\n","import React, {Component} from 'react';\n\nimport {Button} from '@material-ui/core' ;\n\n\nexport default class Cell extends Component {\n    handleClick= () => {\n        // console.log(this.props.cell);\n        this.props.onClick({...this.props.cell})\n    }\n\n    render(){\n        return (\n          <div>\n              <Button\n                style={{\n                  maxWidth: \"4em\",\n                  maxHeight: \"4em\",\n                  minWidth: \"4em\",\n                  minHeight: \"4em\",\n                }}\n                variant=\"contained\"\n                onClick={this.handleClick}\n                color=\"primary\"\n              >\n                {this.props.cell.value}\n              </Button>\n          </div>\n        );\n    }\n        \n}","\n\nfunction cross(A,B){\n        let result = [];\n        for(let a of A){\n            for(let b of B){\n                result.push([a,b]);\n            }\n        }\n        return(result);\n    }\nfunction arrayEquals(A,B){\n    if (A === B) return true;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] !== B[i]) return false;\n    }\n    return true;\n}\n\nfunction unitContains(A,b){\n    for(let a of A){\n        if(arrayEquals(a,b)){\n            return true;\n        }            \n    }\n    return false;\n}\n\nexport {cross, arrayEquals, unitContains} ;","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default function NewGameMenu(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const setDifficulty = (difficulty) => {\n      props.menuHandler(difficulty)\n      handleClose()\n  }\n\n  const handleClose = (event) => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <Button\n        // className=\"boardSideBarButton\"\n        variant=\"outlined\"\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        New Game\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleClose}>Resume</MenuItem>\n        <MenuItem onClick={(e) => setDifficulty(\"easy\")}>Easy</MenuItem>\n        <MenuItem onClick={(e) => setDifficulty(\"medium\")}>Medium</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\nexport default function RulesPopUp() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Rules   \n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"The Rules\"}</DialogTitle>\n        <DialogContent id=\"alert-dialog-description\">\n          <DialogContentText id=\"alert-dialog-description\">\n            A parks puzzle consists of an n x n grid with n contiguous regions\n            known as parks, each marked with a different colour on the grid.\n            Each square may be marked by a tree, represented by T, or an X,\n            which is used to indicate that a square does not contain a tree,or\n            may simply be left empty. A solution to a parks puzzle is a\n            configuration such that,\n          </DialogContentText>\n          <ul>\n            <li>Each row contains a tree</li>\n            <li>Each column contains a tree</li>\n            <li>Each park contains a tree</li>\n            <li>\n              No two trees are on squares that border one-another (even\n              diagonally).\n            </li>\n          </ul>\n        </DialogContent>\n        <DialogActions>\n          <IconButton onClick={handleClose} autoFocus>\n            <DoneIcon />\n          </IconButton>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport {Button,Box,Grid} from '@material-ui/core';\nimport produce, {applyPatches} from 'immer';\nimport Cell from './cell';\nimport{cross, unitContains} from '../helpers';\nimport NewGameMenu from \"./newgamemenu\";\nimport RulesPopUp from './rulespopup'\n\nimport * as puzzles from \"../puzzles.json\";\n\n// Icons\nimport Undo from \"@material-ui/icons/Undo\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport EmojiObjectsIcon from \"@material-ui/icons/EmojiObjects\";\n\n// Colors\nimport { ThemeProvider, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport {\n  themeRed,\n  themeDeepPurple,\n  themeIndigo,\n  themeCyan,\n  themeTeal,\n  themeLime,\n  themeBrown,\n  themeBlueGrey,\n  themeLightGreen,\n  themeAmber,\n} from \"../buttonThemes\";\n\nconst colors = [\n  themeRed,\n  themeDeepPurple,\n  themeIndigo,\n  themeCyan,\n  themeTeal,\n  themeLime,\n  themeBrown,\n  themeBlueGrey,\n  themeLightGreen,\n  themeAmber,\n];\n\n/*\nState: parksPuzzle :\n        {rows: [index: i, cols:[{row:0, col: 0, park:p, value:'T'}...] ]\n        trees: {\n            '[0,0]' : true,\n            '[0.1]' : false, ...\n            }\n        treeCount: 0;\n        }\nProps:\nRows:'ABCDEF...'\nCols:'123456...'\nUnits: { A1: [ [A1,A2,A3...],[A1,B1,C1...],[Cells sharing a park with A1],[cells next to A1]   ]}\nPeers:{A1:[Cells sharing a row, column,park with A1, and cells next to A1]}\n*/\n\nexport default class Board extends Component{\n    constructor(props){\n        super(props) ;\n        //TODO: set difficulty\n        let park = this.newPark(this.props.difficulty);\n        let json,squares,rows, cols, parks, peers ;\n        ({json,squares,rows,cols,parks,peers} = this.parsePuzzle(park));\n        this.json = json ;  //TODO: pick a better name for the raw puzzle\n        this.squares = squares\n        this.rows = rows ;\n        this.cols = cols ;\n        this.parks = parks ;\n        this.peers = peers ;\n        this.values = [\"\", \"T\", \"X\"];\n        // Immer patches for undo\n        // TODO : redo feature that works consistently with undo \n        this.inverseChanges = [] ;\n        // TODO :  handle puzzles without any solutions \n        this.solutions = this.solvePuzzle();\n        this.solution = this.solutions[0]\n\n        this.state = produce({},() => ({\n          parksPuzzle: this.initialState(this.json),\n        }));\n\n    }\n\n    render(){\n        const rows = this.state.parksPuzzle.rows;\n        return (\n          <Grid\n            className=\"boardGrid\"\n            container\n            direction=\"row\"\n            justify=\"center\"\n          >\n            <Grid>\n              <Box className=\"boardBox\">\n                <table>\n                  <tbody>\n                    {rows.map((row) => (\n                      <tr key={row.index}>\n                        {row.cols.map((col) => (\n                          <td key={col.col}>\n                            <ThemeProvider theme={colors[col.park]}>\n                              <MuiThemeProvider theme={colors[col.park]}>\n                                <Cell cell={col} onClick={this.handleClick} />\n                              </MuiThemeProvider>\n                            </ThemeProvider>\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </Box>\n              <Grid\n                className=\"boardButtons\"\n                container\n                alignItems=\"center\"\n                justify=\"space-evenly\"\n              >\n                <Button\n                  onClick={this.showSolution}\n                  startIcon={<EmojiObjectsIcon />}\n                >\n                  Solution\n                </Button>\n                <Button onClick={this.refreshState} startIcon={<RefreshIcon />}>\n                  Refresh\n                </Button>\n                <Button onClick={this.handleUndo} startIcon={<Undo />}>\n                  Undo\n                </Button>\n              </Grid>\n            </Grid>\n            {/* <div className=\"boardSideBar\"> */}\n            <Box\n              className=\"boardSideBar\"\n              border={1}\n              borderColor=\"#303030\"\n              borderRadius={4}\n            >\n              {/* <div className=\"boardSideBar\"> */}\n              {/* <div className=\"boardSideBarButtonContainer\">\n                <Button className=\"boardSideBarButton\">Timer</Button>\n              </div> */}\n              <div className=\"boardSideBarButtonContainer\">\n                <NewGameMenu\n                  menuHandler={this.menuHandler}\n                  className=\"boardSideBarButton\"\n                />\n              </div>\n              <div className=\"boardSideBarButtonContainer\">\n                <RulesPopUp />\n              </div>\n              {/* </div> */}\n            </Box>\n            {/* </div> */}\n          </Grid>\n        );\n    }\n    componentDidUpdate(prevProps){\n        if(this.props.gameCount !== prevProps.gameCount){\n            console.log(\"New Game initiated\")\n        }\n    }\n    \n\n    handleClick = (e) =>{\n        let i, j , val, newVal;\n        i = e.row ;\n        j = e.col ;\n        val = e.value ;\n        newVal = this.incrementValue(val,this.values);\n\n        this.setState(\n            produce(this.state,draft =>{\n                draft.parksPuzzle.rows[i].cols[j].value = newVal;\n                if(val ==='T'){\n                    draft.parksPuzzle.trees[[i,j].toString()] = false ;\n                    draft.parksPuzzle.treeCount--;\n                }\n                else if(newVal === 'T'){\n                    draft.parksPuzzle.trees[[i, j].toString()] = true;\n                    draft.parksPuzzle.treeCount++;\n                }\n            },\n            (patches,inversePatches)=>{\n                this.inverseChanges.push(inversePatches);\n            })\n        )\n    }\n    menuHandler = (difficulty) =>{\n        this.props.menuHandler(difficulty);\n    }\n    refreshState = () =>{\n        this.setState(applyPatches(this.state,this.inverseChanges.flat()));\n    }\n    showSolution = () =>{\n        this.refreshState();\n        this.setState(\n          produce(this.state,(draft) => {\n              for(let [i,j] of this.solution){\n                  draft.parksPuzzle.rows[i].cols[j].value = \"T\";\n                  draft.parksPuzzle.treeCount++;\n              }           \n          },\n          (patches,inversePatches)=>{\n                this.inverseChanges.push(inversePatches);\n            })\n        );\n        this.solution = this.incrementValue(this.solution,this.solutions) ;\n    }\n    handleUndo = () =>{\n        let undo = this.inverseChanges.pop();\n        if(!undo){return;}\n        this.setState(applyPatches(this.state,undo));  \n    }\n\n    incrementValue(val,vals){\n        // Todo: Throw error if unknown value\n        let values = vals ;\n        let index = values.indexOf(val) ;\n        index = (index + 1) % values.length;\n        return values[index] ;\n    }\n    newPark(difficulty){\n        let puzzle;\n        switch(difficulty){\n            case 'easy':\n                puzzle = puzzles.easy[Math.floor(Math.random() * puzzles.easy.length)];\n                break ;\n            case 'medium':\n                puzzle = puzzles.medium[Math.floor(Math.random() * puzzles.medium.length)];\n                break ;\n            default :\n                puzzle = puzzles.noob[0]\n                break;\n        }\n        return puzzle\n    }\n    // parks json => initial state \n    initialState(json){\n        let size, puzzle, result ;\n        ({ size, puzzle } = json);\n        result = {rows: [], trees:{}, treeCount:0}\n        for(let i = 0; i<size; i++){\n            let row = {cols: [], index: i}\n            for(let j =0; j<size; j++){\n                let col ={\n                    row: i,\n                    col:j,\n                    park: puzzle[i][j],\n                    value:'',\n                };\n                row.cols.push(col);\n                result.trees[[i, j].toString()] = false;\n            }\n            result.rows.push(row);\n        }\n        return result;        \n    }\n    // json => {json:original puzzle rows: [] co]s: , parks:[], peers:{},\n    parsePuzzle(json){\n        let size,puzzle,rowArr = [],colArr = [],\n        squares, rows=[],cols=[],parks=[],peers ={};\n\n        ({size,puzzle} = json ) ;\n        for(let i = 0; i<size;i++){\n            rowArr.push(i);\n            colArr.push(i);\n            parks.push([]);\n            rows.push([]);\n            cols.push([]);\n        }\n        squares = cross(rowArr,colArr)\n        // Creating separate arrays for each park\n        for(let i=0;i<size;i++){\n            for(let j=0;j<size;j++ ){\n                parks[puzzle[i][j]].push([i,j]) ;\n                cols[j].push([i,j]);\n                rows[i].push([i,j]);\n            }\n        }\n        // Todo: optimize peer generation\n        for(let sq of squares){\n            let [a,b] = sq ;\n            let sq_peers = new Set()\n            for(let row of rows){\n                if(unitContains(row,sq)){\n                    for(let val of row){\n                        sq_peers.add(val.toString()) ;\n                    }\n                }\n            }\n            for(let col of cols){\n                if (unitContains(col, sq)) {\n                  for(let val of col){\n                        sq_peers.add(val.toString()) ;\n                    }\n                }\n            }\n            for(let park of parks){\n                if (unitContains(park, sq)) {\n                  for(let val of park){\n                        sq_peers.add(val.toString()) ;\n                    }\n                }\n            }\n            for(let i = (a-1);(i <= (a+1) && i<size);i++ ){\n                if(i<0){continue;}\n                for(let j = (b-1); (j<=(b+1) && j<size);j++ ){\n                    if(j<0){continue;}\n                    sq_peers.add([i,j].toString()) ;\n                }\n            }\n            peers[sq] = sq_peers ;            \n        }\n        return({json:json,squares:squares,rows:rows,cols:cols,parks:parks,peers:peers})\n    }\n    isSolved = () =>{\n        let json = this.json ;\n        let parksPuzzle = this.state.parksPuzzle\n        let trees = this.state.parksPuzzle.trees ;\n\n        if(parksPuzzle.treeCount !== json.size){\n            return false ;\n        }\n        for(let key in trees ){ \n            if(trees[key] === true){\n                for(let square of this.peers[key]){\n                    if(trees[square.toString()] === true && square !== key){\n                        return false ;\n                    }\n                }             \n            }\n        }\n        return true \n    }\n    // Solving the current Board\n    // Todo: optimize checking square validity \n    /*  variables: squares [0,0]...[i,j]...[n,n]\n        values : \"X,T\"\n        constraints:\n        - number of Ts = n\n        - Only one T in each unit (row,column,park)\n        - Ts can't be next to each other \n        Starting with the first row, place a tree in the first valid column,\n        -for each row, place a Tin the first valid position and move to the next row\n        -If there are no valid positions, backtrack and try the next column of the previous row\n    */\n    currentPlacement(stack){\n    //Takes the column values from the stack,\n    //returns the corresponding tree placement\n        return Array.from(stack.keys()).map((i) => [i, stack[i]]);\n    }\n    isValid(treePlacement, position){\n    //Checks if a tree may be placed in a given position\n        let posStr = position.toString();\n        for(let t of treePlacement){\n            for(let sq of this.peers[t.toString()]){\n                if(sq === posStr){\n                    return false ;\n                }\n            }            \n        }\n        return true ;\n    }\n    solvePuzzle(){\n        let stack = [],solutions = [], col =0, row=0, size = this.json.size  ;\n        \n        while(true){\n            while(col<size && !(this.isValid(this.currentPlacement(stack),[row,col]))){\n                col++;\n            }\n\n            if(col<size){\n                stack.push(col);\n                if(row+1 >= size){\n                    solutions.push(this.currentPlacement(stack));\n                    stack.pop();\n                    col = size;                    \n                }\n                else{\n                    row++;\n                    col =0;\n                }\n            }\n            if (col>=size){\n                if(row === 0){                    \n                    return solutions\n                }\n                let curr = stack.pop();\n                col = curr + 1 ;\n                row -- ;\n            }\n\n        }\n    }    \n}\n","import { createMuiTheme } from \"@material-ui/core/\";\n\n// Colors\nimport red from \"@material-ui/core/colors/red\";\nimport deepPurple from \"@material-ui/core/colors/deepPurple\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport cyan from \"@material-ui/core/colors/cyan\";\nimport teal from \"@material-ui/core/colors/teal\";\nimport lime from \"@material-ui/core/colors/lime\";\nimport brown from \"@material-ui/core/colors/brown\";\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\nimport amber from \"@material-ui/core/colors/amber\";\n// \nimport green from \"@material-ui/core/colors/green\";\n\nconst themeRed = createMuiTheme({\n  palette: {\n    primary: red,\n    secondary: green,\n  },\n});\n\nconst themeDeepPurple = createMuiTheme({\n  palette: {\n    primary: deepPurple,\n    secondary: green,\n  },\n});\nconst themeIndigo = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: green,\n  },\n});\nconst themeCyan = createMuiTheme({\n  palette: {\n    primary: cyan,\n    secondary: green,\n  },\n});\n\nconst themeTeal = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: green,\n  },\n});\n\nconst themeLime = createMuiTheme({\n  palette: {\n    primary: lime,\n    secondary: green,\n  },\n});\n\nconst themeBrown = createMuiTheme({\n  palette: {\n    primary: brown,\n    secondary: green,\n  },\n});\n\nconst themeBlueGrey = createMuiTheme({\n  palette: {\n    primary: blueGrey,\n    secondary: green,\n  },\n});\n\nconst themeLightGreen = createMuiTheme({\n  palette: {\n    primary: lightGreen,\n    secondary: green,\n  },\n});\n\nconst themeAmber = createMuiTheme({\n  palette: {\n    primary: amber,\n    secondary: green,\n  },\n});\n\nexport {\n  themeRed,\n  themeDeepPurple,\n  themeIndigo,\n  themeCyan,\n  themeTeal,\n  themeLime,\n  themeBrown,\n  themeBlueGrey,\n  themeLightGreen,\n  themeAmber,\n};","import React, {Component} from 'react';\nimport produce from 'immer';\n\nimport {Box,Grid} from '@material-ui/core'\n\n\nimport Board from './board';\n\n\n\nexport default class Parks extends Component{\n    constructor(props){\n        super(props);\n        this.state = produce({}, () => ({\n          difficulty: 'medium',\n          gameCount:0\n        }));\n    }\n    render(){\n        return(\n            <Box mt='5rem'>\n            <Grid className='parksGrid' container direction='row' justify=\"center\" alignItems=\"center\" wrap='nowrap'>\n                <Board key={\"game\"+this.state.gameCount} gameCount={this.state.gameCount} menuHandler={this.menuHandler} difficulty={this.state.difficulty}/>\n            </Grid>\n            </Box>\n        )\n    }\n    menuHandler = (difficulty) =>{\n        this.setState(\n            produce(this.state, (draft) =>{\n                draft.difficulty = difficulty ;\n                draft.gameCount++;\n            })\n        )\n    }\n}","import React from 'react';\nimport {Switch,Route} from 'react-router-dom';\n\n// Pages\nimport Parks from './parks' ;\n\nconst Main = () =>{\n    return (\n      <Switch>\n        {/* <Route exact path=\"/\" component={LandingPage}>; */}\n        <Route exact path=\"/\" component={Parks} />;\n      </Switch>\n    );\n}\n\nexport default Main","import React, {Component} from 'react';\nimport './App.css';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Layout from './components/layout'\n\nimport { createMuiTheme } from \"@material-ui/core/\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\n// Routing\n// import {Link} from 'react-router-dom';\nimport Main  from './components/main'\n// Enable immer patches\nimport {enablePatches} from 'immer'\nenablePatches()\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nexport default class App extends Component {\n    render(){\n        return (\n            <div className=\"app\">\n            <MuiThemeProvider theme={darkTheme}>\n            <CssBaseline/>\n                <Layout />\n                <Main />                \n            </MuiThemeProvider>\n            </div>\n        );\n    }\n    handleMenuClick(){\n        \n    }  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Routing\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}